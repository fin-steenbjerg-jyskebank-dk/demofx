# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Linux

on:
  push:
    branches: [ main ]
    tags:
      - '*'

env:
  APP_NAME: demofx

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Access secrets
      env:
        UPLOAD_SECRET: ${{ secrets.HOME_UPLOADING_SECRET }}
      run: echo "Content of secret - $UPLOAD_SECRET"
    - uses: actions/checkout@v2
    - name: create version
      uses: fin-steenbjerg-jyskebank-dk/create-version-action@v1.6
      id: version-imprint
      with:
        file: 'src/main/java/dk/stonemountain/demo/demofx/Version.java'
    - name: Check version output
      run: echo ${{ steps.version-imprint.outputs.version }}
    # - name: Setup Gluon's GraalVM
    #   uses: gluonhq/setup-graalvm@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     graalvm: '22.1.0-dev-20211221_2319'
    - name: Setup GraalVM environment
      uses: DeLaGuardo/setup-graalvm@master
      with:
        graalvm: nightly
        personal-token: ${{ secrets.GITHUB_TOKEN }}
        java: java11
        arch: amd64
    # - run: $GRAALVM_HOME/bin/gu --jvm install native-image    
    - run: java -version
    - name: Update apt cache
      run: sudo apt update
    - name: Install libraries
      run: sudo apt install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev
    - name: Make dist directory
      run: mkdir dist
    - name: Build native with Gradle
      run: ./gradlew -s build nativeCompile nativeLink
      env:
        GRAALVM_HOME: ${{ env.JAVA_HOME }} 
    - name: Copy native client to dist
      run: cp build/gluonfx/x86_64-linux/${{ env.APP_NAME }} dist
    - name: Show content of dist folder
      run: ls -la dist
    - name: Transfer file
      uses: fin-steenbjerg-jyskebank-dk/transfer-file-action@v1.19
      id: transfer
      with:
        name: ${{ env.APP_NAME }}
        file-path: dist/${{ env.APP_NAME }}
        version: "${{ steps.version-imprint.outputs.version }}"
        client: ${{ secrets.ARTIFACT_CLIENT }}
        client-secret: ${{ secrets.ARTIFACT_CLIENT_SECRET }}
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.APP_NAME }} 
        path: dist