name: Linux

on:
  push:
    branches: [ main ]
    tags:
      - '*'

env:
  APP_NAME: demofx

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [macos-13]
        include:
          # - os: ubuntu-24.04
          #   architecture: x86_64-linux
          #   executeable-extension: 
          # - os: windows-latest          
          #   architecture: x86_64-windows
          #   executeable-extension: .exe
          # - os: macos-latest
          #   architecture: aarch64-darwin
          #   executeable-extension: 
          - os: macos-13
            architecture: x86_64-darwin
            executeable-extension: 

    steps:
    - uses: actions/checkout@v4.1.2
    - name: Get architecture
      run: uname -m
    - name: create build time info
      shell: bash
      run: | 
        echo "JB_SHA=$(echo ${GITHUB_SHA})" >> $GITHUB_ENV
        echo "JB_VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_ENV
        echo "JB_TIME=$(echo $(date))" >> $GITHUB_ENV
    - name: imprint buildinfo
      run: |
        sed -i'' -e "s/##VERSION##/${{ env.JB_VERSION }}/g" 'src/main/java/dk/stonemountain/demo/demofx/Version.java'
        sed -i'' -e "s/##BUILD_TIME##/${{ env.JB_TIME }}/g" 'src/main/java/dk/stonemountain/demo/demofx/Version.java'
        sed -i'' -e "s/##SHA##/${{ env.JB_SHA }}/g" 'src/main/java/dk/stonemountain/demo/demofx/Version.java'
    - name: print buildinfo in file
      run: cat 'src/main/java/dk/stonemountain/demo/demofx/Version.java'

    # - uses: graalvm/setup-graalvm@2f25c0caae5b220866f732832d5e3e29ff493338
    #   with:
    #     java-version: '22'
    #     distribution: 'graalvm'
    #     github-token: ${{ secrets.GITHUB_TOKEN }}

    - uses: gluonhq/setup-graalvm@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        graalvm: 'latest'
        jdk: 'java23'

    - if: matrix.os == 'ubuntu-24.04'
      name: Install libraries
      run: sudo apt install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev
    - if: matrix.os == 'windows-latest'
      name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - if: matrix.os == 'windows-latest'
      name: Visual Studio shell
      uses: egor-tensin/vs-shell@v1
  
    - name: Printing GRAALVM Versions
      run: |
        echo "GRAALVM_HOME: $GRAALVM_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        java --version
        native-image --version

    - name: Build native client
      run: ./gradlew -s build nativeCompile nativeLink
      env:
        GRAALVM_HOME: ${{ env.JAVA_HOME }}
  
    - name: See build output folders
      run: ls -l build
    - name: See build gluonfx output folders
      run: ls -l build/gluonfx
    - name: See build output folders for architecture
      run: ls -l build/gluonfx/${{ matrix.architecture }}
  
    - name: Upload
      uses: actions/upload-artifact@v4.3.1
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os }}
        path: build/native/nativeCompile

    - name: Make dist directory
      run: mkdir dist
    - name: Copy native client to dist
      run: cp -r build/gluonfx/${{ matrix.architecture }}/${{ env.APP_NAME }}${{ matrix.executeable-extension }} dist
    - name: Upload
      uses: actions/upload-artifact@v4.3.1
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os }}
        path: dist
  